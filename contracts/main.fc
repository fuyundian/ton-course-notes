#include "imports/stdlib.fc";

const const::mins_ton_for_storage = 10000000; ;;0.01 ton;

(int, slice,slice ) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ;; 計數器
        ds~load_uint(32),
        ;; 發送人地址
        ds~load_msg_addr(),
        ;; 合約所有者
        ds~load_msg_addr()
    );

}
;; 保存數據
() save_data(int counter_value,slice  recent_sender,slice owner_address) impure inline {
    set_data(begin_cell()
    .store_uint(counter_value,32)
    .store_slice(recent_sender)
    .store_slice(owner_address)
    .end_cell());
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice sc = in_msg.begin_parse();
    int flags = sc~load_uint(4);
    slice sender_address = sc~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    var (counter_value,recent_address,owner_address) = load_data();
    if(op == 1){
        save_data(counter_value + 1, sender_address, owner_address);
        return ();
    }
    ;; 充值
    if(op == 2){
        return ();
    }   
    ;; 提現
    if(op == 3){
        ;; 比較合約所有者地址
        throw_unless(103,equal_slice_bits(sender_address,owner_address));
        ;; 取款餘額
        int withdraw_amount = in_msg_body~load_coins();
        ;; 獲取合約餘額
        var [balance,_] = get_balance();   
        ;; 比較合約地址餘額
        throw_unless(104,balance - const::mins_ton_for_storage);
        ;; 獲取退款或餘額最新值為提款基恩
        int return_value = min(withdraw_amount,balance);
        ;; 發送消息模式 0 普通模式 1 轉賬費用和消息費用區分
        int msg_mode = 0;
        ;; 發送內部消息
        var msg = begin_cell()
        ;;0x18 值转换成 6 位 0b（0x） 011000 
        ;; 第一位 0-1 表示它是 int_msg_info (内部信息)
        ;; 然后有 3 个位 1、1 、 0，即
        ;; 禁用即时超立方路由（yar在编写合约时暂时用不上）
        ;; 信息可能被退回
        ;; 信息本身不是退回的结果。
        ;; 最後兩位00 發送者地址 addr_none，序列化为两位字符串 00
        ;; 发件人地址会被验证器重写（当验证器将发件人的实际地址重寫），
        ;; 因此任何有效地址都可以存储在这里。最短的有效地址序列化是 addr_none，它序列化为一个两位字符串 00
            .store_uint(0x18,6)
        ;; 存儲發送者地址序列化
            .store_slice(sender_address)
        ;; 實際提款金額数量序列化
            .store_coins(return_value)
        ;; 轉換为107的二進制00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
        ;; 第1位0 代表空的额外货币字典
        ;; 第2位 0000 代表輸入費用 會覆盖先預設為零
        ;; 第3位 0000 代表轉賬費用 會覆盖先預設為零
        ;; 第4位 000000000000000000000000000000000000000000000000000000000000000 代表lt of transaction 上一次转账交易hash
        ;; 第5位 00000000000000000000000000000000 代表unixtime of transaction  当前交易时间
        ;; 第6位 0 代表no init-field flag (Maybe) 没有初始化字段标志
        ;; 第7位 0 代表in place message body flag 消息初始化标志，因为可能会在消息中部署合约，设置了标志是会初始化只能合约
            .store_uint(0,1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg,msg_mode);
    }

    throw(777);

}  

slice get_the_latest_sender() method_id {
    slice ds = get_data().begin_parse();
    return ds~load_msg_addr();
}

(int,slice,slice) get_contract_storage_data() method_id {
    var (counter_value,recent_address,owner_address) = load_data();
    return (
        ;; 計數器
        counter_value,
        ;; 接收地址
        recent_address,
        ;; 所有者地址
        owner_address
    );
}

int balance() method_id {
    var [balance,_] = get_balance();
    return balance;
}